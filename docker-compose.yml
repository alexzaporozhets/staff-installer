version: '2'

services:
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    restart: always
    volumes:
      - ./etc/prometheus/:/etc/prometheus/
      - ./storage/prometheus:/prometheus
    command:
      - '-config.file=/etc/prometheus/prometheus.yml'
      - '-storage.local.path=/prometheus'
      - '-alertmanager.url=http://alertmanager:9093'
    expose:
      - 9090
    links:
      - cadvisor:cadvisor
      - alertmanager:alertmanager
    depends_on:
      - cadvisor
  
  node-exporter:
    image: prom/node-exporter
    restart: always
    expose:
      - 9001
 
  redis_exporter:
    image: 21zoo/redis_exporter
    command: -redis.addr=redis:6379
    restart: always
 
  mongodb_exporter:
    image: eses/mongodb_exporter
    expose:
      - 9104
    volumes:
      - ./storage/mongodb_exporter/:/log
    command: -mongodb.uri mongodb://mongo/staffdotcom -log_dir /log
    restart: always

  alertmanager:
    image: prom/alertmanager
    volumes: 
      - ./etc/alertmanager/:/etc/alertmanager/
    command:
      - '-config.file=/etc/alertmanager/config.yml'
      - '-storage.path=/alertmanager'
    restart: always
      
  cadvisor:
    image: google/cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    expose:
      - 8080
    restart: always
  
  grafana:
    image: grafana/grafana
    depends_on:
      - prometheus
    volumes:
      - ./storage/grafana:/var/lib/grafana
    environment:
      GF_USERS_ALLOW_SIGN_UP: "false"
      GF_SERVER_ROOT_URL: "/grafana/"
    env_file:
      - .env
    restart: always

  nginx:
    build: src/nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./etc/nginx:/nginx/conf
    links:
      - api-server
      - app-web
      - app-admin
      - app-desktop
      - grafana
    restart: always
  
  api-server:
    image: 847166803921.dkr.ecr.us-east-1.amazonaws.com/staff-api-server:latest
    links:
     - mongo
     - redis
    depends_on:
     - mongo
     - redis
    ports:
      - "3000:3000"     
    environment:
     PORT: 3000
     MONGO_URI: mongodb://mongo/staffdotcom
     REDIS_URL: redis://redis
     API_URL: "http://api.staff.local"
     NODE_ENV: production
     NODE_API_CLUSTERS: 8
     DEBUG_MQ: 1
     INSTALL_MODE: "local"
     ATATUS_KEY: "61a362f515c14428865d5fc4214346cc"
    env_file:
      - .env
      - azure.env
    command: bash -c "sleep 5; cd /pipeline/source; node --optimize_for_size --max_old_space_size=460 server.js"
    restart: always

  api-stats:
    image: 847166803921.dkr.ecr.us-east-1.amazonaws.com/staff-api-server:latest
    links:
     - mongo
     - redis
    depends_on:
     - mongo
     - redis
    environment:
     MONGO_URI: mongodb://mongo/staffdotcom
     REDIS_URL: redis://redis
     NODE_ENV: production
     DEBUG_MQ: 1
     INSTALL_MODE: "local"
    env_file:
      - .env
      - azure.env
    command: bash -c "sleep 5; cd /pipeline/source; node --optimize_for_size --max_old_space_size=460 --gc_interval=100 app/workers/stat.js"
    restart: always
 
  api-retention:
    image: 847166803921.dkr.ecr.us-east-1.amazonaws.com/staff-api-server:latest
    links:
     - mongo
     - redis
    depends_on:
     - mongo
     - redis
    environment:
     MONGO_URI: mongodb://mongo/staffdotcom
     REDIS_URL: redis://redis
     NODE_ENV: production
     DEBUG_MQ: 1
     INSTALL_MODE: "local"
    env_file:
      - .env
      - azure.env
    command: bash -c "sleep 5; cd /pipeline/source; node --optimize_for_size --max_old_space_size=460 --gc_interval=100 app/workers/retention.js"
    restart: always
  
  app-web:
    image: 847166803921.dkr.ecr.us-east-1.amazonaws.com/staff-app-web:latest
    environment:
     PORT: 3000
     API_URL: "http://api.staff.local"
     BASE_DIR: "/app/"
     NODE_ENV: production
    restart: always
    command: bash -c "cd /pipeline/source/dist && python -m SimpleHTTPServer 3000"
  
  app-admin:
    image: 847166803921.dkr.ecr.us-east-1.amazonaws.com/staff-app-admin:latest
    environment:
     PORT: 3000
     API_URL: "http://api.staff.local"
     BASE_DIR: "/admin/"
     NODE_ENV: production
    restart: always
    command: bash -c "cd /pipeline/source/dist && python -m SimpleHTTPServer 3000"
  
  app-desktop:
    image: 847166803921.dkr.ecr.us-east-1.amazonaws.com/staff-app-desktop:latest
    environment:
     PORT: 3000
     API_URL: "http://api.staff.local"
     BASE_DIR: "/desktop/"
     NODE_ENV: production
    restart: always
    command: bash -c "cd /pipeline/source/dist && python -m SimpleHTTPServer 3000"
   
  mongo:
    image: mongo
    volumes:
      - ./storage/mongodb:/data/db
    restart: always
  
  mongo-backup:
    #image: tutum/mongodb-backup
    build: src/mongodb-backup
    privileged: true
    depends_on:
      - mongo
    environment:
      MONGODB_HOST: mongo
      MONGODB_PORT: 27017
      MONGODB_DB: staffdotcom
      CRON_TIME: '0 0 * * *'
      MAX_BACKUPS: 10
      INIT_BACKUP: 1
    env_file:
      - azure.env
    volumes:
      - ./storage/mongodb-backup:/backup
    cap_add:
      - ALL
    restart: always

  redis:
    image: redis
    restart: always

# 4 worker processes is usually sufficient for a webserver serving
# both static files and passing dynamic requests back to apache, fastcgi or an app server
worker_processes     2;
 
# normally you leave this at the default of 1024
events {
    worker_connections 66536;
    use epoll;
    multi_accept on;
}

http {

  access_log /dev/stdout;
  error_log /dev/stderr;

  keepalive_timeout 65;
  keepalive_requests 100000;
  sendfile         on;
  tcp_nopush       on;
  tcp_nodelay      on;

  client_body_buffer_size    128k;
  client_max_body_size       10m;
  client_header_buffer_size    1k;
  large_client_header_buffers  4 4k;
  output_buffers   1 32k;
  postpone_output  1460;

  client_header_timeout  3m;
  client_body_timeout    3m;
  send_timeout           3m;

  open_file_cache max=1000 inactive=20s;
  open_file_cache_valid 30s;
  open_file_cache_min_uses 5;
  open_file_cache_errors off;
    
  gzip on;
  gzip_min_length  1000;
  gzip_buffers     4 4k;
  gzip_types       text/html application/x-javascript text/css application/javascript text/javascript text/plain text/xml application/json application/vnd.ms-fontobject application/x-font-opentype application/x-font-truetype application/x-font-ttf application/xml font/eot font/opentype font/otf image/svg+xml image/vnd.microsoft.icon;
  gzip_disable "MSIE [1-6]\.";

  # API
  server {
    listen 80;
    server_name api.staff.local;
    location / {
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_http_version 1.1;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $host;    
        proxy_pass http://api-server:3000;
    }
  }
  # Application 
  server {
    listen 80;
    server_name app.staff.local;
    location / {
        proxy_pass http://app-web:3000;
    }
  }
  # Admin
  server {
    listen 80;
    server_name admin.staff.local;
    location / {
        proxy_pass http://app-admin:3000;
    }
  }
  # Desktop app
  server {
    listen 80;
    server_name desktop.staff.local;
    location / {
        proxy_pass http://app-desktop:3000;
    }
  }

  # S3
  server {
    listen 80;
    server_name s3.staff.local;
    location / {
        if ($http_origin ~* (https?://.*\.staff\.local(:[0-9]+)?$)) {
           set $cors "1";
        }
        
        # OPTIONS indicates a CORS pre-flight request
        if ($request_method = 'OPTIONS') {
           set $cors "${cors}o";
        }
        
        # Append CORS headers to any request from 
        # allowed CORS domain, except OPTIONS
        if ($cors = "1") {
           more_set_headers 'Access-Control-Allow-Origin: $http_origin';
           more_set_headers 'Access-Control-Allow-Credentials: true';
           proxy_pass      http://s3:3000;
        }
        
        # OPTIONS (pre-flight) request from allowed 
        # CORS domain. return response directly
        if ($cors = "1o") {
           more_set_headers 'Access-Control-Allow-Origin: $http_origin';
           more_set_headers 'Access-Control-Allow-Methods: GET, POST, OPTIONS, PUT, DELETE';
           more_set_headers 'Access-Control-Allow-Credentials: true';
           more_set_headers 'Access-Control-Allow-Headers: Origin,Content-Type,Accept';
           add_header Content-Length 0;
           add_header Content-Type text/plain;
           return 204;
        }
        proxy_pass http://s3:80;
    }
  }
 
  # Metrics
  server {
    listen 9145;
    allow 172.0.0.0/8;
    deny all;
    access_log /dev/null;
    location /metrics {
      content_by_lua 'prometheus:collect()';
    }
  }

  lua_shared_dict prometheus_metrics 10M;
  lua_package_path "/etc/nginx/prometheus.lua";
  init_by_lua '
    prometheus = require("prometheus").init("prometheus_metrics")
    metric_requests = prometheus:counter(
      "nginx_http_requests_total", "Number of HTTP requests", {"host", "status"})
    metric_latency = prometheus:histogram(
      "nginx_http_request_duration_seconds", "HTTP request latency", {"host"})
  ';
  log_by_lua '
    local host = ngx.var.host:gsub("^www.", "")
    metric_requests:inc(1, {host, ngx.var.status})
    metric_latency:observe(ngx.now() - ngx.req.start_time(), {host})
  ';

}
